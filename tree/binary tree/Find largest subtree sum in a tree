#include <bits/stdc++.h>
using namespace std;
  
// Structure of a tree node.
struct Node {
    int key;
    Node *left, *right;
};
  
// Function to create new tree node.
Node* newNode(int key)
{
    Node* temp = new Node;
    temp->key = key;
    temp->left = temp->right = NULL;
    return temp;
}
  
// Helper function to find largest
// subtree sum recursively.
int travel(Node* root)
{
    if(root==NULL) return 0;
    root->key+=travel(root->left)+travel(root->right);
    return root->key;
}
void findval(Node* root,int &res)
{
    if(root==NULL) return;
    if(root->key>res) 
       res=root->key;
    findval(root->left,res);
    findval(root->right,res);
}
// Function to find largest subtree sum.
int findLargestSubtreeSum(Node* root)
{
    // If tree does not exist, 
    // then answer is 0.
    if(root==NULL) return 0;
    if(root->left==NULL && root->right==NULL) return root->key;
    int res=INT_MIN;
    travel(root);
    findval(root,res);
    return res;
    
}
  
// Driver function
int main()
{
    /*
               1
             /   \
            /     \
          -2       3
          / \     /  \
         /   \   /    \
        4     5 -6     2
    */
  
    Node* root = newNode(1);
    root->left = newNode(-2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(-6);
    root->right->right = newNode(2);
  
    cout << findLargestSubtreeSum(root);
    return 0;
}
